// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/chunk.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChunkService_ChunkFile_FullMethodName             = "/aether.api.ChunkService/ChunkFile"
	ChunkService_GetFileChunks_FullMethodName         = "/aether.api.ChunkService/GetFileChunks"
	ChunkService_DownloadChunk_FullMethodName         = "/aether.api.ChunkService/DownloadChunk"
	ChunkService_UploadChunk_FullMethodName           = "/aether.api.ChunkService/UploadChunk"
	ChunkService_VerifyFileIntegrity_FullMethodName   = "/aether.api.ChunkService/VerifyFileIntegrity"
	ChunkService_GetDeduplicationStats_FullMethodName = "/aether.api.ChunkService/GetDeduplicationStats"
	ChunkService_CleanOrphanChunks_FullMethodName     = "/aether.api.ChunkService/CleanOrphanChunks"
)

// ChunkServiceClient is the client API for ChunkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Chunk servisi - Dosya parçalama ve deduplication
type ChunkServiceClient interface {
	// Dosyayı chunk'la ve kaydet
	ChunkFile(ctx context.Context, in *ChunkFileRequest, opts ...grpc.CallOption) (*ChunkFileResponse, error)
	// Dosyanın chunk'larını getir
	GetFileChunks(ctx context.Context, in *GetFileChunksRequest, opts ...grpc.CallOption) (*GetFileChunksResponse, error)
	// Chunk verisi indir (binary data)
	DownloadChunk(ctx context.Context, in *DownloadChunkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChunkDataResponse], error)
	// Chunk yükle (binary data)
	UploadChunk(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadChunkRequest, UploadChunkResponse], error)
	// Dosya bütünlüğünü doğrula
	VerifyFileIntegrity(ctx context.Context, in *VerifyFileIntegrityRequest, opts ...grpc.CallOption) (*VerifyFileIntegrityResponse, error)
	// Deduplication istatistikleri
	GetDeduplicationStats(ctx context.Context, in *GetDeduplicationStatsRequest, opts ...grpc.CallOption) (*GetDeduplicationStatsResponse, error)
	// Orphan chunk'ları temizle
	CleanOrphanChunks(ctx context.Context, in *CleanOrphanChunksRequest, opts ...grpc.CallOption) (*CleanOrphanChunksResponse, error)
}

type chunkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkServiceClient(cc grpc.ClientConnInterface) ChunkServiceClient {
	return &chunkServiceClient{cc}
}

func (c *chunkServiceClient) ChunkFile(ctx context.Context, in *ChunkFileRequest, opts ...grpc.CallOption) (*ChunkFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkFileResponse)
	err := c.cc.Invoke(ctx, ChunkService_ChunkFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) GetFileChunks(ctx context.Context, in *GetFileChunksRequest, opts ...grpc.CallOption) (*GetFileChunksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileChunksResponse)
	err := c.cc.Invoke(ctx, ChunkService_GetFileChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) DownloadChunk(ctx context.Context, in *DownloadChunkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChunkDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChunkService_ServiceDesc.Streams[0], ChunkService_DownloadChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadChunkRequest, ChunkDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChunkService_DownloadChunkClient = grpc.ServerStreamingClient[ChunkDataResponse]

func (c *chunkServiceClient) UploadChunk(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadChunkRequest, UploadChunkResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChunkService_ServiceDesc.Streams[1], ChunkService_UploadChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadChunkRequest, UploadChunkResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChunkService_UploadChunkClient = grpc.ClientStreamingClient[UploadChunkRequest, UploadChunkResponse]

func (c *chunkServiceClient) VerifyFileIntegrity(ctx context.Context, in *VerifyFileIntegrityRequest, opts ...grpc.CallOption) (*VerifyFileIntegrityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyFileIntegrityResponse)
	err := c.cc.Invoke(ctx, ChunkService_VerifyFileIntegrity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) GetDeduplicationStats(ctx context.Context, in *GetDeduplicationStatsRequest, opts ...grpc.CallOption) (*GetDeduplicationStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeduplicationStatsResponse)
	err := c.cc.Invoke(ctx, ChunkService_GetDeduplicationStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) CleanOrphanChunks(ctx context.Context, in *CleanOrphanChunksRequest, opts ...grpc.CallOption) (*CleanOrphanChunksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanOrphanChunksResponse)
	err := c.cc.Invoke(ctx, ChunkService_CleanOrphanChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkServiceServer is the server API for ChunkService service.
// All implementations must embed UnimplementedChunkServiceServer
// for forward compatibility.
//
// Chunk servisi - Dosya parçalama ve deduplication
type ChunkServiceServer interface {
	// Dosyayı chunk'la ve kaydet
	ChunkFile(context.Context, *ChunkFileRequest) (*ChunkFileResponse, error)
	// Dosyanın chunk'larını getir
	GetFileChunks(context.Context, *GetFileChunksRequest) (*GetFileChunksResponse, error)
	// Chunk verisi indir (binary data)
	DownloadChunk(*DownloadChunkRequest, grpc.ServerStreamingServer[ChunkDataResponse]) error
	// Chunk yükle (binary data)
	UploadChunk(grpc.ClientStreamingServer[UploadChunkRequest, UploadChunkResponse]) error
	// Dosya bütünlüğünü doğrula
	VerifyFileIntegrity(context.Context, *VerifyFileIntegrityRequest) (*VerifyFileIntegrityResponse, error)
	// Deduplication istatistikleri
	GetDeduplicationStats(context.Context, *GetDeduplicationStatsRequest) (*GetDeduplicationStatsResponse, error)
	// Orphan chunk'ları temizle
	CleanOrphanChunks(context.Context, *CleanOrphanChunksRequest) (*CleanOrphanChunksResponse, error)
	mustEmbedUnimplementedChunkServiceServer()
}

// UnimplementedChunkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChunkServiceServer struct{}

func (UnimplementedChunkServiceServer) ChunkFile(context.Context, *ChunkFileRequest) (*ChunkFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChunkFile not implemented")
}
func (UnimplementedChunkServiceServer) GetFileChunks(context.Context, *GetFileChunksRequest) (*GetFileChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileChunks not implemented")
}
func (UnimplementedChunkServiceServer) DownloadChunk(*DownloadChunkRequest, grpc.ServerStreamingServer[ChunkDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadChunk not implemented")
}
func (UnimplementedChunkServiceServer) UploadChunk(grpc.ClientStreamingServer[UploadChunkRequest, UploadChunkResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (UnimplementedChunkServiceServer) VerifyFileIntegrity(context.Context, *VerifyFileIntegrityRequest) (*VerifyFileIntegrityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyFileIntegrity not implemented")
}
func (UnimplementedChunkServiceServer) GetDeduplicationStats(context.Context, *GetDeduplicationStatsRequest) (*GetDeduplicationStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeduplicationStats not implemented")
}
func (UnimplementedChunkServiceServer) CleanOrphanChunks(context.Context, *CleanOrphanChunksRequest) (*CleanOrphanChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanOrphanChunks not implemented")
}
func (UnimplementedChunkServiceServer) mustEmbedUnimplementedChunkServiceServer() {}
func (UnimplementedChunkServiceServer) testEmbeddedByValue()                      {}

// UnsafeChunkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkServiceServer will
// result in compilation errors.
type UnsafeChunkServiceServer interface {
	mustEmbedUnimplementedChunkServiceServer()
}

func RegisterChunkServiceServer(s grpc.ServiceRegistrar, srv ChunkServiceServer) {
	// If the following call pancis, it indicates UnimplementedChunkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChunkService_ServiceDesc, srv)
}

func _ChunkService_ChunkFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).ChunkFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_ChunkFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).ChunkFile(ctx, req.(*ChunkFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_GetFileChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).GetFileChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_GetFileChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).GetFileChunks(ctx, req.(*GetFileChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_DownloadChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadChunkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChunkServiceServer).DownloadChunk(m, &grpc.GenericServerStream[DownloadChunkRequest, ChunkDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChunkService_DownloadChunkServer = grpc.ServerStreamingServer[ChunkDataResponse]

func _ChunkService_UploadChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChunkServiceServer).UploadChunk(&grpc.GenericServerStream[UploadChunkRequest, UploadChunkResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChunkService_UploadChunkServer = grpc.ClientStreamingServer[UploadChunkRequest, UploadChunkResponse]

func _ChunkService_VerifyFileIntegrity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyFileIntegrityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).VerifyFileIntegrity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_VerifyFileIntegrity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).VerifyFileIntegrity(ctx, req.(*VerifyFileIntegrityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_GetDeduplicationStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeduplicationStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).GetDeduplicationStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_GetDeduplicationStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).GetDeduplicationStats(ctx, req.(*GetDeduplicationStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_CleanOrphanChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanOrphanChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).CleanOrphanChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkService_CleanOrphanChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).CleanOrphanChunks(ctx, req.(*CleanOrphanChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkService_ServiceDesc is the grpc.ServiceDesc for ChunkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aether.api.ChunkService",
	HandlerType: (*ChunkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChunkFile",
			Handler:    _ChunkService_ChunkFile_Handler,
		},
		{
			MethodName: "GetFileChunks",
			Handler:    _ChunkService_GetFileChunks_Handler,
		},
		{
			MethodName: "VerifyFileIntegrity",
			Handler:    _ChunkService_VerifyFileIntegrity_Handler,
		},
		{
			MethodName: "GetDeduplicationStats",
			Handler:    _ChunkService_GetDeduplicationStats_Handler,
		},
		{
			MethodName: "CleanOrphanChunks",
			Handler:    _ChunkService_CleanOrphanChunks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadChunk",
			Handler:       _ChunkService_DownloadChunk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadChunk",
			Handler:       _ChunkService_UploadChunk_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/chunk.proto",
}
