// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/sync.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SyncService_SyncFile_FullMethodName        = "/aether.api.SyncService/SyncFile"
	SyncService_GetSyncStatus_FullMethodName   = "/aether.api.SyncService/GetSyncStatus"
	SyncService_PauseSync_FullMethodName       = "/aether.api.SyncService/PauseSync"
	SyncService_ResumeSync_FullMethodName      = "/aether.api.SyncService/ResumeSync"
	SyncService_WatchSyncEvents_FullMethodName = "/aether.api.SyncService/WatchSyncEvents"
)

// SyncServiceClient is the client API for SyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sync servisi
type SyncServiceClient interface {
	// Dosya senkronize et
	SyncFile(ctx context.Context, in *SyncFileRequest, opts ...grpc.CallOption) (*SyncFileResponse, error)
	// Senkronizasyon durumunu getir
	GetSyncStatus(ctx context.Context, in *GetSyncStatusRequest, opts ...grpc.CallOption) (*SyncStatusResponse, error)
	// Senkronizasyonu duraklat/devam ettir
	PauseSync(ctx context.Context, in *PauseSyncRequest, opts ...grpc.CallOption) (*Status, error)
	ResumeSync(ctx context.Context, in *ResumeSyncRequest, opts ...grpc.CallOption) (*Status, error)
	// Real-time senkronizasyon olaylar覺n覺 dinle (streaming)
	WatchSyncEvents(ctx context.Context, in *WatchSyncEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SyncEvent], error)
}

type syncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncServiceClient(cc grpc.ClientConnInterface) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) SyncFile(ctx context.Context, in *SyncFileRequest, opts ...grpc.CallOption) (*SyncFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncFileResponse)
	err := c.cc.Invoke(ctx, SyncService_SyncFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) GetSyncStatus(ctx context.Context, in *GetSyncStatusRequest, opts ...grpc.CallOption) (*SyncStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncStatusResponse)
	err := c.cc.Invoke(ctx, SyncService_GetSyncStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) PauseSync(ctx context.Context, in *PauseSyncRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, SyncService_PauseSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) ResumeSync(ctx context.Context, in *ResumeSyncRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, SyncService_ResumeSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) WatchSyncEvents(ctx context.Context, in *WatchSyncEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SyncEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SyncService_ServiceDesc.Streams[0], SyncService_WatchSyncEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchSyncEventsRequest, SyncEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SyncService_WatchSyncEventsClient = grpc.ServerStreamingClient[SyncEvent]

// SyncServiceServer is the server API for SyncService service.
// All implementations must embed UnimplementedSyncServiceServer
// for forward compatibility.
//
// Sync servisi
type SyncServiceServer interface {
	// Dosya senkronize et
	SyncFile(context.Context, *SyncFileRequest) (*SyncFileResponse, error)
	// Senkronizasyon durumunu getir
	GetSyncStatus(context.Context, *GetSyncStatusRequest) (*SyncStatusResponse, error)
	// Senkronizasyonu duraklat/devam ettir
	PauseSync(context.Context, *PauseSyncRequest) (*Status, error)
	ResumeSync(context.Context, *ResumeSyncRequest) (*Status, error)
	// Real-time senkronizasyon olaylar覺n覺 dinle (streaming)
	WatchSyncEvents(*WatchSyncEventsRequest, grpc.ServerStreamingServer[SyncEvent]) error
	mustEmbedUnimplementedSyncServiceServer()
}

// UnimplementedSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSyncServiceServer struct{}

func (UnimplementedSyncServiceServer) SyncFile(context.Context, *SyncFileRequest) (*SyncFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncFile not implemented")
}
func (UnimplementedSyncServiceServer) GetSyncStatus(context.Context, *GetSyncStatusRequest) (*SyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncStatus not implemented")
}
func (UnimplementedSyncServiceServer) PauseSync(context.Context, *PauseSyncRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSync not implemented")
}
func (UnimplementedSyncServiceServer) ResumeSync(context.Context, *ResumeSyncRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeSync not implemented")
}
func (UnimplementedSyncServiceServer) WatchSyncEvents(*WatchSyncEventsRequest, grpc.ServerStreamingServer[SyncEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchSyncEvents not implemented")
}
func (UnimplementedSyncServiceServer) mustEmbedUnimplementedSyncServiceServer() {}
func (UnimplementedSyncServiceServer) testEmbeddedByValue()                     {}

// UnsafeSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServiceServer will
// result in compilation errors.
type UnsafeSyncServiceServer interface {
	mustEmbedUnimplementedSyncServiceServer()
}

func RegisterSyncServiceServer(s grpc.ServiceRegistrar, srv SyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SyncService_ServiceDesc, srv)
}

func _SyncService_SyncFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).SyncFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_SyncFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).SyncFile(ctx, req.(*SyncFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_GetSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).GetSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_GetSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).GetSyncStatus(ctx, req.(*GetSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_PauseSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).PauseSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_PauseSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).PauseSync(ctx, req.(*PauseSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_ResumeSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).ResumeSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_ResumeSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).ResumeSync(ctx, req.(*ResumeSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_WatchSyncEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchSyncEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServiceServer).WatchSyncEvents(m, &grpc.GenericServerStream[WatchSyncEventsRequest, SyncEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SyncService_WatchSyncEventsServer = grpc.ServerStreamingServer[SyncEvent]

// SyncService_ServiceDesc is the grpc.ServiceDesc for SyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aether.api.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncFile",
			Handler:    _SyncService_SyncFile_Handler,
		},
		{
			MethodName: "GetSyncStatus",
			Handler:    _SyncService_GetSyncStatus_Handler,
		},
		{
			MethodName: "PauseSync",
			Handler:    _SyncService_PauseSync_Handler,
		},
		{
			MethodName: "ResumeSync",
			Handler:    _SyncService_ResumeSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchSyncEvents",
			Handler:       _SyncService_WatchSyncEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/sync.proto",
}
