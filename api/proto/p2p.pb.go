// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/proto/p2p.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChunkRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ChunkHash         string                 `protobuf:"bytes,1,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	FileId            string                 `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	RequesterDeviceId string                 `protobuf:"bytes,3,opt,name=requester_device_id,json=requesterDeviceId,proto3" json:"requester_device_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ChunkRequest) Reset() {
	*x = ChunkRequest{}
	mi := &file_api_proto_p2p_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkRequest) ProtoMessage() {}

func (x *ChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_p2p_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkRequest.ProtoReflect.Descriptor instead.
func (*ChunkRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_p2p_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkRequest) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

func (x *ChunkRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *ChunkRequest) GetRequesterDeviceId() string {
	if x != nil {
		return x.RequesterDeviceId
	}
	return ""
}

type ChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ChunkData     []byte                 `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`
	ChunkHash     string                 `protobuf:"bytes,3,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	ChunkSize     int64                  `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkResponse) Reset() {
	*x = ChunkResponse{}
	mi := &file_api_proto_p2p_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkResponse) ProtoMessage() {}

func (x *ChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_p2p_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkResponse.ProtoReflect.Descriptor instead.
func (*ChunkResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_p2p_proto_rawDescGZIP(), []int{1}
}

func (x *ChunkResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ChunkResponse) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *ChunkResponse) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

func (x *ChunkResponse) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

type ChunkData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHash     string                 `protobuf:"bytes,1,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	TotalSize     int64                  `protobuf:"varint,4,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	IsFinal       bool                   `protobuf:"varint,5,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkData) Reset() {
	*x = ChunkData{}
	mi := &file_api_proto_p2p_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkData) ProtoMessage() {}

func (x *ChunkData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_p2p_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkData.ProtoReflect.Descriptor instead.
func (*ChunkData) Descriptor() ([]byte, []int) {
	return file_api_proto_p2p_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkData) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

func (x *ChunkData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChunkData) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ChunkData) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ChunkData) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

type TransferStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BytesReceived int64                  `protobuf:"varint,2,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	ReceivedHash  string                 `protobuf:"bytes,3,opt,name=received_hash,json=receivedHash,proto3" json:"received_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferStatus) Reset() {
	*x = TransferStatus{}
	mi := &file_api_proto_p2p_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStatus) ProtoMessage() {}

func (x *TransferStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_p2p_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStatus.ProtoReflect.Descriptor instead.
func (*TransferStatus) Descriptor() ([]byte, []int) {
	return file_api_proto_p2p_proto_rawDescGZIP(), []int{3}
}

func (x *TransferStatus) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TransferStatus) GetBytesReceived() int64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *TransferStatus) GetReceivedHash() string {
	if x != nil {
		return x.ReceivedHash
	}
	return ""
}

type FileMetadataRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FileId         string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	SenderDeviceId string                 `protobuf:"bytes,2,opt,name=sender_device_id,json=senderDeviceId,proto3" json:"sender_device_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FileMetadataRequest) Reset() {
	*x = FileMetadataRequest{}
	mi := &file_api_proto_p2p_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadataRequest) ProtoMessage() {}

func (x *FileMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_p2p_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadataRequest.ProtoReflect.Descriptor instead.
func (*FileMetadataRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_p2p_proto_rawDescGZIP(), []int{4}
}

func (x *FileMetadataRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileMetadataRequest) GetSenderDeviceId() string {
	if x != nil {
		return x.SenderDeviceId
	}
	return ""
}

type FileMetadataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	FileId        string                 `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	RelativePath  string                 `protobuf:"bytes,3,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	GlobalHash    string                 `protobuf:"bytes,5,opt,name=global_hash,json=globalHash,proto3" json:"global_hash,omitempty"`
	ChunkHashes   []string               `protobuf:"bytes,6,rep,name=chunk_hashes,json=chunkHashes,proto3" json:"chunk_hashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileMetadataResponse) Reset() {
	*x = FileMetadataResponse{}
	mi := &file_api_proto_p2p_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadataResponse) ProtoMessage() {}

func (x *FileMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_p2p_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadataResponse.ProtoReflect.Descriptor instead.
func (*FileMetadataResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_p2p_proto_rawDescGZIP(), []int{5}
}

func (x *FileMetadataResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FileMetadataResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileMetadataResponse) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *FileMetadataResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileMetadataResponse) GetGlobalHash() string {
	if x != nil {
		return x.GlobalHash
	}
	return ""
}

func (x *FileMetadataResponse) GetChunkHashes() []string {
	if x != nil {
		return x.ChunkHashes
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_api_proto_p2p_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_p2p_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_p2p_proto_rawDescGZIP(), []int{6}
}

func (x *PingRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *PingRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LatencyMs     int64                  `protobuf:"varint,3,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_api_proto_p2p_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_p2p_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_p2p_proto_rawDescGZIP(), []int{7}
}

func (x *PingResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PingResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PingResponse) GetLatencyMs() int64 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

var File_api_proto_p2p_proto protoreflect.FileDescriptor

const file_api_proto_p2p_proto_rawDesc = "" +
	"\n" +
	"\x13api/proto/p2p.proto\x12\n" +
	"aether.api\x1a\x16api/proto/common.proto\"v\n" +
	"\fChunkRequest\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x01 \x01(\tR\tchunkHash\x12\x17\n" +
	"\afile_id\x18\x02 \x01(\tR\x06fileId\x12.\n" +
	"\x13requester_device_id\x18\x03 \x01(\tR\x11requesterDeviceId\"\x98\x01\n" +
	"\rChunkResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.aether.api.StatusR\x06status\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x02 \x01(\fR\tchunkData\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x03 \x01(\tR\tchunkHash\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x04 \x01(\x03R\tchunkSize\"\x90\x01\n" +
	"\tChunkData\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x01 \x01(\tR\tchunkHash\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\x12\x1d\n" +
	"\n" +
	"total_size\x18\x04 \x01(\x03R\ttotalSize\x12\x19\n" +
	"\bis_final\x18\x05 \x01(\bR\aisFinal\"\x88\x01\n" +
	"\x0eTransferStatus\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.aether.api.StatusR\x06status\x12%\n" +
	"\x0ebytes_received\x18\x02 \x01(\x03R\rbytesReceived\x12#\n" +
	"\rreceived_hash\x18\x03 \x01(\tR\freceivedHash\"X\n" +
	"\x13FileMetadataRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12(\n" +
	"\x10sender_device_id\x18\x02 \x01(\tR\x0esenderDeviceId\"\xd8\x01\n" +
	"\x14FileMetadataResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.aether.api.StatusR\x06status\x12\x17\n" +
	"\afile_id\x18\x02 \x01(\tR\x06fileId\x12#\n" +
	"\rrelative_path\x18\x03 \x01(\tR\frelativePath\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\x12\x1f\n" +
	"\vglobal_hash\x18\x05 \x01(\tR\n" +
	"globalHash\x12!\n" +
	"\fchunk_hashes\x18\x06 \x03(\tR\vchunkHashes\"H\n" +
	"\vPingRequest\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\tR\bdeviceId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\"w\n" +
	"\fPingResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.aether.api.StatusR\x06status\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12\x1d\n" +
	"\n" +
	"latency_ms\x18\x03 \x01(\x03R\tlatencyMs2\xae\x02\n" +
	"\x0eP2PDataService\x12C\n" +
	"\fRequestChunk\x12\x18.aether.api.ChunkRequest\x1a\x19.aether.api.ChunkResponse\x12D\n" +
	"\rTransferChunk\x12\x15.aether.api.ChunkData\x1a\x1a.aether.api.TransferStatus(\x01\x12V\n" +
	"\x11ShareFileMetadata\x12\x1f.aether.api.FileMetadataRequest\x1a .aether.api.FileMetadataResponse\x129\n" +
	"\x04Ping\x12\x17.aether.api.PingRequest\x1a\x18.aether.api.PingResponseB(Z&github.com/aether/sync/api/proto;protob\x06proto3"

var (
	file_api_proto_p2p_proto_rawDescOnce sync.Once
	file_api_proto_p2p_proto_rawDescData []byte
)

func file_api_proto_p2p_proto_rawDescGZIP() []byte {
	file_api_proto_p2p_proto_rawDescOnce.Do(func() {
		file_api_proto_p2p_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_p2p_proto_rawDesc), len(file_api_proto_p2p_proto_rawDesc)))
	})
	return file_api_proto_p2p_proto_rawDescData
}

var file_api_proto_p2p_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_api_proto_p2p_proto_goTypes = []any{
	(*ChunkRequest)(nil),         // 0: aether.api.ChunkRequest
	(*ChunkResponse)(nil),        // 1: aether.api.ChunkResponse
	(*ChunkData)(nil),            // 2: aether.api.ChunkData
	(*TransferStatus)(nil),       // 3: aether.api.TransferStatus
	(*FileMetadataRequest)(nil),  // 4: aether.api.FileMetadataRequest
	(*FileMetadataResponse)(nil), // 5: aether.api.FileMetadataResponse
	(*PingRequest)(nil),          // 6: aether.api.PingRequest
	(*PingResponse)(nil),         // 7: aether.api.PingResponse
	(*Status)(nil),               // 8: aether.api.Status
}
var file_api_proto_p2p_proto_depIdxs = []int32{
	8, // 0: aether.api.ChunkResponse.status:type_name -> aether.api.Status
	8, // 1: aether.api.TransferStatus.status:type_name -> aether.api.Status
	8, // 2: aether.api.FileMetadataResponse.status:type_name -> aether.api.Status
	8, // 3: aether.api.PingResponse.status:type_name -> aether.api.Status
	0, // 4: aether.api.P2PDataService.RequestChunk:input_type -> aether.api.ChunkRequest
	2, // 5: aether.api.P2PDataService.TransferChunk:input_type -> aether.api.ChunkData
	4, // 6: aether.api.P2PDataService.ShareFileMetadata:input_type -> aether.api.FileMetadataRequest
	6, // 7: aether.api.P2PDataService.Ping:input_type -> aether.api.PingRequest
	1, // 8: aether.api.P2PDataService.RequestChunk:output_type -> aether.api.ChunkResponse
	3, // 9: aether.api.P2PDataService.TransferChunk:output_type -> aether.api.TransferStatus
	5, // 10: aether.api.P2PDataService.ShareFileMetadata:output_type -> aether.api.FileMetadataResponse
	7, // 11: aether.api.P2PDataService.Ping:output_type -> aether.api.PingResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_api_proto_p2p_proto_init() }
func file_api_proto_p2p_proto_init() {
	if File_api_proto_p2p_proto != nil {
		return
	}
	file_api_proto_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_p2p_proto_rawDesc), len(file_api_proto_p2p_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_p2p_proto_goTypes,
		DependencyIndexes: file_api_proto_p2p_proto_depIdxs,
		MessageInfos:      file_api_proto_p2p_proto_msgTypes,
	}.Build()
	File_api_proto_p2p_proto = out.File
	file_api_proto_p2p_proto_goTypes = nil
	file_api_proto_p2p_proto_depIdxs = nil
}
