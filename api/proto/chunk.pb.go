// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/proto/chunk.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChunkInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Hash           string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`  // SHA-256 hash
	Size           int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"` // Boyut (bytes)
	CreationTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	IsLocal        bool                   `protobuf:"varint,4,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`                      // Bu cihazda var mı?
	ReferenceCount int32                  `protobuf:"varint,5,opt,name=reference_count,json=referenceCount,proto3" json:"reference_count,omitempty"` // Kaç dosya kullanıyor?
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	mi := &file_api_proto_chunk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ChunkInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChunkInfo) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ChunkInfo) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *ChunkInfo) GetReferenceCount() int32 {
	if x != nil {
		return x.ReferenceCount
	}
	return 0
}

type FileChunkInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ChunkHash     string                 `protobuf:"bytes,2,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	ChunkIndex    int32                  `protobuf:"varint,3,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"` // Dosya içindeki sıra
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileChunkInfo) Reset() {
	*x = FileChunkInfo{}
	mi := &file_api_proto_chunk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunkInfo) ProtoMessage() {}

func (x *FileChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunkInfo.ProtoReflect.Descriptor instead.
func (*FileChunkInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{1}
}

func (x *FileChunkInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileChunkInfo) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

func (x *FileChunkInfo) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

// ChunkFile
type ChunkFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FilePath      string                 `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` // Yerel dosya yolu
	FolderId      string                 `protobuf:"bytes,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"` // Klasör ID (optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkFileRequest) Reset() {
	*x = ChunkFileRequest{}
	mi := &file_api_proto_chunk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkFileRequest) ProtoMessage() {}

func (x *ChunkFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkFileRequest.ProtoReflect.Descriptor instead.
func (*ChunkFileRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkFileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *ChunkFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ChunkFileRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

type ChunkFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	GlobalHash    string                 `protobuf:"bytes,2,opt,name=global_hash,json=globalHash,proto3" json:"global_hash,omitempty"` // Dosyanın global hash'i
	ChunkCount    int32                  `protobuf:"varint,3,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"`
	TotalSize     int64                  `protobuf:"varint,4,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	Chunks        []*ChunkInfo           `protobuf:"bytes,5,rep,name=chunks,proto3" json:"chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkFileResponse) Reset() {
	*x = ChunkFileResponse{}
	mi := &file_api_proto_chunk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkFileResponse) ProtoMessage() {}

func (x *ChunkFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkFileResponse.ProtoReflect.Descriptor instead.
func (*ChunkFileResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{3}
}

func (x *ChunkFileResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ChunkFileResponse) GetGlobalHash() string {
	if x != nil {
		return x.GlobalHash
	}
	return ""
}

func (x *ChunkFileResponse) GetChunkCount() int32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *ChunkFileResponse) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ChunkFileResponse) GetChunks() []*ChunkInfo {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// GetFileChunks
type GetFileChunksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileChunksRequest) Reset() {
	*x = GetFileChunksRequest{}
	mi := &file_api_proto_chunk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileChunksRequest) ProtoMessage() {}

func (x *GetFileChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileChunksRequest.ProtoReflect.Descriptor instead.
func (*GetFileChunksRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{4}
}

func (x *GetFileChunksRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type GetFileChunksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Chunks        []*ChunkInfo           `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
	FileChunks    []*FileChunkInfo       `protobuf:"bytes,3,rep,name=file_chunks,json=fileChunks,proto3" json:"file_chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileChunksResponse) Reset() {
	*x = GetFileChunksResponse{}
	mi := &file_api_proto_chunk_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileChunksResponse) ProtoMessage() {}

func (x *GetFileChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileChunksResponse.ProtoReflect.Descriptor instead.
func (*GetFileChunksResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{5}
}

func (x *GetFileChunksResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetFileChunksResponse) GetChunks() []*ChunkInfo {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *GetFileChunksResponse) GetFileChunks() []*FileChunkInfo {
	if x != nil {
		return x.FileChunks
	}
	return nil
}

// DownloadChunk (streaming)
type DownloadChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHash     string                 `protobuf:"bytes,1,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadChunkRequest) Reset() {
	*x = DownloadChunkRequest{}
	mi := &file_api_proto_chunk_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadChunkRequest) ProtoMessage() {}

func (x *DownloadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadChunkRequest.ProtoReflect.Descriptor instead.
func (*DownloadChunkRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{6}
}

func (x *DownloadChunkRequest) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

type ChunkDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                             // Chunk verisi (binary)
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                        // Bu paketin offset'i
	TotalSize     int32                  `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"` // Toplam chunk boyutu
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkDataResponse) Reset() {
	*x = ChunkDataResponse{}
	mi := &file_api_proto_chunk_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkDataResponse) ProtoMessage() {}

func (x *ChunkDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkDataResponse.ProtoReflect.Descriptor instead.
func (*ChunkDataResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{7}
}

func (x *ChunkDataResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChunkDataResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ChunkDataResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// UploadChunk (streaming)
type UploadChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHash     string                 `protobuf:"bytes,1,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`  // İlk pakette gönderilir
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`                             // Chunk verisi
	Offset        int32                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                        // Bu paketin offset'i
	TotalSize     int64                  `protobuf:"varint,4,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"` // Toplam boyut (ilk pakette)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadChunkRequest) Reset() {
	*x = UploadChunkRequest{}
	mi := &file_api_proto_chunk_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunkRequest) ProtoMessage() {}

func (x *UploadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunkRequest.ProtoReflect.Descriptor instead.
func (*UploadChunkRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{8}
}

func (x *UploadChunkRequest) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

func (x *UploadChunkRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadChunkRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UploadChunkRequest) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type UploadChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ChunkHash     string                 `protobuf:"bytes,2,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	WasDuplicate  bool                   `protobuf:"varint,3,opt,name=was_duplicate,json=wasDuplicate,proto3" json:"was_duplicate,omitempty"` // Chunk zaten var mıydı?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadChunkResponse) Reset() {
	*x = UploadChunkResponse{}
	mi := &file_api_proto_chunk_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunkResponse) ProtoMessage() {}

func (x *UploadChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunkResponse.ProtoReflect.Descriptor instead.
func (*UploadChunkResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{9}
}

func (x *UploadChunkResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UploadChunkResponse) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

func (x *UploadChunkResponse) GetWasDuplicate() bool {
	if x != nil {
		return x.WasDuplicate
	}
	return false
}

// VerifyFileIntegrity
type VerifyFileIntegrityRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	FileId             string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ExpectedGlobalHash string                 `protobuf:"bytes,2,opt,name=expected_global_hash,json=expectedGlobalHash,proto3" json:"expected_global_hash,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *VerifyFileIntegrityRequest) Reset() {
	*x = VerifyFileIntegrityRequest{}
	mi := &file_api_proto_chunk_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyFileIntegrityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyFileIntegrityRequest) ProtoMessage() {}

func (x *VerifyFileIntegrityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyFileIntegrityRequest.ProtoReflect.Descriptor instead.
func (*VerifyFileIntegrityRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{10}
}

func (x *VerifyFileIntegrityRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *VerifyFileIntegrityRequest) GetExpectedGlobalHash() string {
	if x != nil {
		return x.ExpectedGlobalHash
	}
	return ""
}

type VerifyFileIntegrityResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Status           *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IsValid          bool                   `protobuf:"varint,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	ActualGlobalHash string                 `protobuf:"bytes,3,opt,name=actual_global_hash,json=actualGlobalHash,proto3" json:"actual_global_hash,omitempty"`
	CorruptedChunks  []string               `protobuf:"bytes,4,rep,name=corrupted_chunks,json=corruptedChunks,proto3" json:"corrupted_chunks,omitempty"` // Bozuk chunk hash'leri
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VerifyFileIntegrityResponse) Reset() {
	*x = VerifyFileIntegrityResponse{}
	mi := &file_api_proto_chunk_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyFileIntegrityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyFileIntegrityResponse) ProtoMessage() {}

func (x *VerifyFileIntegrityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyFileIntegrityResponse.ProtoReflect.Descriptor instead.
func (*VerifyFileIntegrityResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{11}
}

func (x *VerifyFileIntegrityResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *VerifyFileIntegrityResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *VerifyFileIntegrityResponse) GetActualGlobalHash() string {
	if x != nil {
		return x.ActualGlobalHash
	}
	return ""
}

func (x *VerifyFileIntegrityResponse) GetCorruptedChunks() []string {
	if x != nil {
		return x.CorruptedChunks
	}
	return nil
}

// GetDeduplicationStats
type GetDeduplicationStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeduplicationStatsRequest) Reset() {
	*x = GetDeduplicationStatsRequest{}
	mi := &file_api_proto_chunk_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeduplicationStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeduplicationStatsRequest) ProtoMessage() {}

func (x *GetDeduplicationStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeduplicationStatsRequest.ProtoReflect.Descriptor instead.
func (*GetDeduplicationStatsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{12}
}

type GetDeduplicationStatsResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Status               *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TotalChunkReferences int64                  `protobuf:"varint,2,opt,name=total_chunk_references,json=totalChunkReferences,proto3" json:"total_chunk_references,omitempty"` // Toplam referans sayısı
	UniqueChunks         int64                  `protobuf:"varint,3,opt,name=unique_chunks,json=uniqueChunks,proto3" json:"unique_chunks,omitempty"`                           // Benzersiz chunk sayısı
	SavingsBytes         int64                  `protobuf:"varint,4,opt,name=savings_bytes,json=savingsBytes,proto3" json:"savings_bytes,omitempty"`                           // Tasarruf edilen alan
	DeduplicationRatio   float32                `protobuf:"fixed32,5,opt,name=deduplication_ratio,json=deduplicationRatio,proto3" json:"deduplication_ratio,omitempty"`        // Deduplication oranı %
	DiskUsageBytes       int64                  `protobuf:"varint,6,opt,name=disk_usage_bytes,json=diskUsageBytes,proto3" json:"disk_usage_bytes,omitempty"`                   // Disk kullanımı
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetDeduplicationStatsResponse) Reset() {
	*x = GetDeduplicationStatsResponse{}
	mi := &file_api_proto_chunk_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeduplicationStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeduplicationStatsResponse) ProtoMessage() {}

func (x *GetDeduplicationStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeduplicationStatsResponse.ProtoReflect.Descriptor instead.
func (*GetDeduplicationStatsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{13}
}

func (x *GetDeduplicationStatsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetDeduplicationStatsResponse) GetTotalChunkReferences() int64 {
	if x != nil {
		return x.TotalChunkReferences
	}
	return 0
}

func (x *GetDeduplicationStatsResponse) GetUniqueChunks() int64 {
	if x != nil {
		return x.UniqueChunks
	}
	return 0
}

func (x *GetDeduplicationStatsResponse) GetSavingsBytes() int64 {
	if x != nil {
		return x.SavingsBytes
	}
	return 0
}

func (x *GetDeduplicationStatsResponse) GetDeduplicationRatio() float32 {
	if x != nil {
		return x.DeduplicationRatio
	}
	return 0
}

func (x *GetDeduplicationStatsResponse) GetDiskUsageBytes() int64 {
	if x != nil {
		return x.DiskUsageBytes
	}
	return 0
}

// CleanOrphanChunks
type CleanOrphanChunksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanOrphanChunksRequest) Reset() {
	*x = CleanOrphanChunksRequest{}
	mi := &file_api_proto_chunk_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanOrphanChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanOrphanChunksRequest) ProtoMessage() {}

func (x *CleanOrphanChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanOrphanChunksRequest.ProtoReflect.Descriptor instead.
func (*CleanOrphanChunksRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{14}
}

type CleanOrphanChunksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *Status                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DeletedChunks int32                  `protobuf:"varint,2,opt,name=deleted_chunks,json=deletedChunks,proto3" json:"deleted_chunks,omitempty"` // Silinen chunk sayısı
	FreedBytes    int64                  `protobuf:"varint,3,opt,name=freed_bytes,json=freedBytes,proto3" json:"freed_bytes,omitempty"`          // Boşaltılan alan
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanOrphanChunksResponse) Reset() {
	*x = CleanOrphanChunksResponse{}
	mi := &file_api_proto_chunk_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanOrphanChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanOrphanChunksResponse) ProtoMessage() {}

func (x *CleanOrphanChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_chunk_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanOrphanChunksResponse.ProtoReflect.Descriptor instead.
func (*CleanOrphanChunksResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_chunk_proto_rawDescGZIP(), []int{15}
}

func (x *CleanOrphanChunksResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CleanOrphanChunksResponse) GetDeletedChunks() int32 {
	if x != nil {
		return x.DeletedChunks
	}
	return 0
}

func (x *CleanOrphanChunksResponse) GetFreedBytes() int64 {
	if x != nil {
		return x.FreedBytes
	}
	return 0
}

var File_api_proto_chunk_proto protoreflect.FileDescriptor

const file_api_proto_chunk_proto_rawDesc = "" +
	"\n" +
	"\x15api/proto/chunk.proto\x12\n" +
	"aether.api\x1a\x16api/proto/common.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb8\x01\n" +
	"\tChunkInfo\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12?\n" +
	"\rcreation_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12\x19\n" +
	"\bis_local\x18\x04 \x01(\bR\aisLocal\x12'\n" +
	"\x0freference_count\x18\x05 \x01(\x05R\x0ereferenceCount\"h\n" +
	"\rFileChunkInfo\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x02 \x01(\tR\tchunkHash\x12\x1f\n" +
	"\vchunk_index\x18\x03 \x01(\x05R\n" +
	"chunkIndex\"e\n" +
	"\x10ChunkFileRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x1b\n" +
	"\tfile_path\x18\x02 \x01(\tR\bfilePath\x12\x1b\n" +
	"\tfolder_id\x18\x03 \x01(\tR\bfolderId\"\xcf\x01\n" +
	"\x11ChunkFileResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.aether.api.StatusR\x06status\x12\x1f\n" +
	"\vglobal_hash\x18\x02 \x01(\tR\n" +
	"globalHash\x12\x1f\n" +
	"\vchunk_count\x18\x03 \x01(\x05R\n" +
	"chunkCount\x12\x1d\n" +
	"\n" +
	"total_size\x18\x04 \x01(\x03R\ttotalSize\x12-\n" +
	"\x06chunks\x18\x05 \x03(\v2\x15.aether.api.ChunkInfoR\x06chunks\"/\n" +
	"\x14GetFileChunksRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\"\xae\x01\n" +
	"\x15GetFileChunksResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.aether.api.StatusR\x06status\x12-\n" +
	"\x06chunks\x18\x02 \x03(\v2\x15.aether.api.ChunkInfoR\x06chunks\x12:\n" +
	"\vfile_chunks\x18\x03 \x03(\v2\x19.aether.api.FileChunkInfoR\n" +
	"fileChunks\"5\n" +
	"\x14DownloadChunkRequest\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x01 \x01(\tR\tchunkHash\"^\n" +
	"\x11ChunkDataResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize\"~\n" +
	"\x12UploadChunkRequest\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x01 \x01(\tR\tchunkHash\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x05R\x06offset\x12\x1d\n" +
	"\n" +
	"total_size\x18\x04 \x01(\x03R\ttotalSize\"\x85\x01\n" +
	"\x13UploadChunkResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.aether.api.StatusR\x06status\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x02 \x01(\tR\tchunkHash\x12#\n" +
	"\rwas_duplicate\x18\x03 \x01(\bR\fwasDuplicate\"g\n" +
	"\x1aVerifyFileIntegrityRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x120\n" +
	"\x14expected_global_hash\x18\x02 \x01(\tR\x12expectedGlobalHash\"\xbd\x01\n" +
	"\x1bVerifyFileIntegrityResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.aether.api.StatusR\x06status\x12\x19\n" +
	"\bis_valid\x18\x02 \x01(\bR\aisValid\x12,\n" +
	"\x12actual_global_hash\x18\x03 \x01(\tR\x10actualGlobalHash\x12)\n" +
	"\x10corrupted_chunks\x18\x04 \x03(\tR\x0fcorruptedChunks\"\x1e\n" +
	"\x1cGetDeduplicationStatsRequest\"\xa6\x02\n" +
	"\x1dGetDeduplicationStatsResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.aether.api.StatusR\x06status\x124\n" +
	"\x16total_chunk_references\x18\x02 \x01(\x03R\x14totalChunkReferences\x12#\n" +
	"\runique_chunks\x18\x03 \x01(\x03R\funiqueChunks\x12#\n" +
	"\rsavings_bytes\x18\x04 \x01(\x03R\fsavingsBytes\x12/\n" +
	"\x13deduplication_ratio\x18\x05 \x01(\x02R\x12deduplicationRatio\x12(\n" +
	"\x10disk_usage_bytes\x18\x06 \x01(\x03R\x0ediskUsageBytes\"\x1a\n" +
	"\x18CleanOrphanChunksRequest\"\x8f\x01\n" +
	"\x19CleanOrphanChunksResponse\x12*\n" +
	"\x06status\x18\x01 \x01(\v2\x12.aether.api.StatusR\x06status\x12%\n" +
	"\x0edeleted_chunks\x18\x02 \x01(\x05R\rdeletedChunks\x12\x1f\n" +
	"\vfreed_bytes\x18\x03 \x01(\x03R\n" +
	"freedBytes2\x8c\x05\n" +
	"\fChunkService\x12H\n" +
	"\tChunkFile\x12\x1c.aether.api.ChunkFileRequest\x1a\x1d.aether.api.ChunkFileResponse\x12T\n" +
	"\rGetFileChunks\x12 .aether.api.GetFileChunksRequest\x1a!.aether.api.GetFileChunksResponse\x12R\n" +
	"\rDownloadChunk\x12 .aether.api.DownloadChunkRequest\x1a\x1d.aether.api.ChunkDataResponse0\x01\x12P\n" +
	"\vUploadChunk\x12\x1e.aether.api.UploadChunkRequest\x1a\x1f.aether.api.UploadChunkResponse(\x01\x12f\n" +
	"\x13VerifyFileIntegrity\x12&.aether.api.VerifyFileIntegrityRequest\x1a'.aether.api.VerifyFileIntegrityResponse\x12l\n" +
	"\x15GetDeduplicationStats\x12(.aether.api.GetDeduplicationStatsRequest\x1a).aether.api.GetDeduplicationStatsResponse\x12`\n" +
	"\x11CleanOrphanChunks\x12$.aether.api.CleanOrphanChunksRequest\x1a%.aether.api.CleanOrphanChunksResponseB(Z&github.com/aether/sync/api/proto;protob\x06proto3"

var (
	file_api_proto_chunk_proto_rawDescOnce sync.Once
	file_api_proto_chunk_proto_rawDescData []byte
)

func file_api_proto_chunk_proto_rawDescGZIP() []byte {
	file_api_proto_chunk_proto_rawDescOnce.Do(func() {
		file_api_proto_chunk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_chunk_proto_rawDesc), len(file_api_proto_chunk_proto_rawDesc)))
	})
	return file_api_proto_chunk_proto_rawDescData
}

var file_api_proto_chunk_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_proto_chunk_proto_goTypes = []any{
	(*ChunkInfo)(nil),                     // 0: aether.api.ChunkInfo
	(*FileChunkInfo)(nil),                 // 1: aether.api.FileChunkInfo
	(*ChunkFileRequest)(nil),              // 2: aether.api.ChunkFileRequest
	(*ChunkFileResponse)(nil),             // 3: aether.api.ChunkFileResponse
	(*GetFileChunksRequest)(nil),          // 4: aether.api.GetFileChunksRequest
	(*GetFileChunksResponse)(nil),         // 5: aether.api.GetFileChunksResponse
	(*DownloadChunkRequest)(nil),          // 6: aether.api.DownloadChunkRequest
	(*ChunkDataResponse)(nil),             // 7: aether.api.ChunkDataResponse
	(*UploadChunkRequest)(nil),            // 8: aether.api.UploadChunkRequest
	(*UploadChunkResponse)(nil),           // 9: aether.api.UploadChunkResponse
	(*VerifyFileIntegrityRequest)(nil),    // 10: aether.api.VerifyFileIntegrityRequest
	(*VerifyFileIntegrityResponse)(nil),   // 11: aether.api.VerifyFileIntegrityResponse
	(*GetDeduplicationStatsRequest)(nil),  // 12: aether.api.GetDeduplicationStatsRequest
	(*GetDeduplicationStatsResponse)(nil), // 13: aether.api.GetDeduplicationStatsResponse
	(*CleanOrphanChunksRequest)(nil),      // 14: aether.api.CleanOrphanChunksRequest
	(*CleanOrphanChunksResponse)(nil),     // 15: aether.api.CleanOrphanChunksResponse
	(*timestamppb.Timestamp)(nil),         // 16: google.protobuf.Timestamp
	(*Status)(nil),                        // 17: aether.api.Status
}
var file_api_proto_chunk_proto_depIdxs = []int32{
	16, // 0: aether.api.ChunkInfo.creation_time:type_name -> google.protobuf.Timestamp
	17, // 1: aether.api.ChunkFileResponse.status:type_name -> aether.api.Status
	0,  // 2: aether.api.ChunkFileResponse.chunks:type_name -> aether.api.ChunkInfo
	17, // 3: aether.api.GetFileChunksResponse.status:type_name -> aether.api.Status
	0,  // 4: aether.api.GetFileChunksResponse.chunks:type_name -> aether.api.ChunkInfo
	1,  // 5: aether.api.GetFileChunksResponse.file_chunks:type_name -> aether.api.FileChunkInfo
	17, // 6: aether.api.UploadChunkResponse.status:type_name -> aether.api.Status
	17, // 7: aether.api.VerifyFileIntegrityResponse.status:type_name -> aether.api.Status
	17, // 8: aether.api.GetDeduplicationStatsResponse.status:type_name -> aether.api.Status
	17, // 9: aether.api.CleanOrphanChunksResponse.status:type_name -> aether.api.Status
	2,  // 10: aether.api.ChunkService.ChunkFile:input_type -> aether.api.ChunkFileRequest
	4,  // 11: aether.api.ChunkService.GetFileChunks:input_type -> aether.api.GetFileChunksRequest
	6,  // 12: aether.api.ChunkService.DownloadChunk:input_type -> aether.api.DownloadChunkRequest
	8,  // 13: aether.api.ChunkService.UploadChunk:input_type -> aether.api.UploadChunkRequest
	10, // 14: aether.api.ChunkService.VerifyFileIntegrity:input_type -> aether.api.VerifyFileIntegrityRequest
	12, // 15: aether.api.ChunkService.GetDeduplicationStats:input_type -> aether.api.GetDeduplicationStatsRequest
	14, // 16: aether.api.ChunkService.CleanOrphanChunks:input_type -> aether.api.CleanOrphanChunksRequest
	3,  // 17: aether.api.ChunkService.ChunkFile:output_type -> aether.api.ChunkFileResponse
	5,  // 18: aether.api.ChunkService.GetFileChunks:output_type -> aether.api.GetFileChunksResponse
	7,  // 19: aether.api.ChunkService.DownloadChunk:output_type -> aether.api.ChunkDataResponse
	9,  // 20: aether.api.ChunkService.UploadChunk:output_type -> aether.api.UploadChunkResponse
	11, // 21: aether.api.ChunkService.VerifyFileIntegrity:output_type -> aether.api.VerifyFileIntegrityResponse
	13, // 22: aether.api.ChunkService.GetDeduplicationStats:output_type -> aether.api.GetDeduplicationStatsResponse
	15, // 23: aether.api.ChunkService.CleanOrphanChunks:output_type -> aether.api.CleanOrphanChunksResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_proto_chunk_proto_init() }
func file_api_proto_chunk_proto_init() {
	if File_api_proto_chunk_proto != nil {
		return
	}
	file_api_proto_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_chunk_proto_rawDesc), len(file_api_proto_chunk_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_chunk_proto_goTypes,
		DependencyIndexes: file_api_proto_chunk_proto_depIdxs,
		MessageInfos:      file_api_proto_chunk_proto_msgTypes,
	}.Build()
	File_api_proto_chunk_proto = out.File
	file_api_proto_chunk_proto_goTypes = nil
	file_api_proto_chunk_proto_depIdxs = nil
}
