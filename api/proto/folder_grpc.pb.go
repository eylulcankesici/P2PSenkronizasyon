// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/folder.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FolderService_CreateFolder_FullMethodName       = "/aether.api.FolderService/CreateFolder"
	FolderService_GetFolder_FullMethodName          = "/aether.api.FolderService/GetFolder"
	FolderService_ListFolders_FullMethodName        = "/aether.api.FolderService/ListFolders"
	FolderService_UpdateFolder_FullMethodName       = "/aether.api.FolderService/UpdateFolder"
	FolderService_DeleteFolder_FullMethodName       = "/aether.api.FolderService/DeleteFolder"
	FolderService_ToggleFolderActive_FullMethodName = "/aether.api.FolderService/ToggleFolderActive"
	FolderService_ScanFolder_FullMethodName         = "/aether.api.FolderService/ScanFolder"
)

// FolderServiceClient is the client API for FolderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Folder servisi
type FolderServiceClient interface {
	// Yeni klasör oluştur
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*FolderResponse, error)
	// Klasör getir
	GetFolder(ctx context.Context, in *GetFolderRequest, opts ...grpc.CallOption) (*FolderResponse, error)
	// Tüm klasörleri listele
	ListFolders(ctx context.Context, in *ListFoldersRequest, opts ...grpc.CallOption) (*ListFoldersResponse, error)
	// Klasör güncelle
	UpdateFolder(ctx context.Context, in *UpdateFolderRequest, opts ...grpc.CallOption) (*FolderResponse, error)
	// Klasör sil
	DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*Status, error)
	// Klasörü aktif/pasif yap
	ToggleFolderActive(ctx context.Context, in *ToggleFolderActiveRequest, opts ...grpc.CallOption) (*FolderResponse, error)
	// Klasörü tara ve dosyaları kaydet
	ScanFolder(ctx context.Context, in *ScanFolderRequest, opts ...grpc.CallOption) (*ScanFolderResponse, error)
}

type folderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFolderServiceClient(cc grpc.ClientConnInterface) FolderServiceClient {
	return &folderServiceClient{cc}
}

func (c *folderServiceClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*FolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FolderResponse)
	err := c.cc.Invoke(ctx, FolderService_CreateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) GetFolder(ctx context.Context, in *GetFolderRequest, opts ...grpc.CallOption) (*FolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FolderResponse)
	err := c.cc.Invoke(ctx, FolderService_GetFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) ListFolders(ctx context.Context, in *ListFoldersRequest, opts ...grpc.CallOption) (*ListFoldersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFoldersResponse)
	err := c.cc.Invoke(ctx, FolderService_ListFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) UpdateFolder(ctx context.Context, in *UpdateFolderRequest, opts ...grpc.CallOption) (*FolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FolderResponse)
	err := c.cc.Invoke(ctx, FolderService_UpdateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) DeleteFolder(ctx context.Context, in *DeleteFolderRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, FolderService_DeleteFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) ToggleFolderActive(ctx context.Context, in *ToggleFolderActiveRequest, opts ...grpc.CallOption) (*FolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FolderResponse)
	err := c.cc.Invoke(ctx, FolderService_ToggleFolderActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) ScanFolder(ctx context.Context, in *ScanFolderRequest, opts ...grpc.CallOption) (*ScanFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanFolderResponse)
	err := c.cc.Invoke(ctx, FolderService_ScanFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FolderServiceServer is the server API for FolderService service.
// All implementations must embed UnimplementedFolderServiceServer
// for forward compatibility.
//
// Folder servisi
type FolderServiceServer interface {
	// Yeni klasör oluştur
	CreateFolder(context.Context, *CreateFolderRequest) (*FolderResponse, error)
	// Klasör getir
	GetFolder(context.Context, *GetFolderRequest) (*FolderResponse, error)
	// Tüm klasörleri listele
	ListFolders(context.Context, *ListFoldersRequest) (*ListFoldersResponse, error)
	// Klasör güncelle
	UpdateFolder(context.Context, *UpdateFolderRequest) (*FolderResponse, error)
	// Klasör sil
	DeleteFolder(context.Context, *DeleteFolderRequest) (*Status, error)
	// Klasörü aktif/pasif yap
	ToggleFolderActive(context.Context, *ToggleFolderActiveRequest) (*FolderResponse, error)
	// Klasörü tara ve dosyaları kaydet
	ScanFolder(context.Context, *ScanFolderRequest) (*ScanFolderResponse, error)
	mustEmbedUnimplementedFolderServiceServer()
}

// UnimplementedFolderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFolderServiceServer struct{}

func (UnimplementedFolderServiceServer) CreateFolder(context.Context, *CreateFolderRequest) (*FolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedFolderServiceServer) GetFolder(context.Context, *GetFolderRequest) (*FolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolder not implemented")
}
func (UnimplementedFolderServiceServer) ListFolders(context.Context, *ListFoldersRequest) (*ListFoldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFolders not implemented")
}
func (UnimplementedFolderServiceServer) UpdateFolder(context.Context, *UpdateFolderRequest) (*FolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFolder not implemented")
}
func (UnimplementedFolderServiceServer) DeleteFolder(context.Context, *DeleteFolderRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolder not implemented")
}
func (UnimplementedFolderServiceServer) ToggleFolderActive(context.Context, *ToggleFolderActiveRequest) (*FolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleFolderActive not implemented")
}
func (UnimplementedFolderServiceServer) ScanFolder(context.Context, *ScanFolderRequest) (*ScanFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanFolder not implemented")
}
func (UnimplementedFolderServiceServer) mustEmbedUnimplementedFolderServiceServer() {}
func (UnimplementedFolderServiceServer) testEmbeddedByValue()                       {}

// UnsafeFolderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FolderServiceServer will
// result in compilation errors.
type UnsafeFolderServiceServer interface {
	mustEmbedUnimplementedFolderServiceServer()
}

func RegisterFolderServiceServer(s grpc.ServiceRegistrar, srv FolderServiceServer) {
	// If the following call pancis, it indicates UnimplementedFolderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FolderService_ServiceDesc, srv)
}

func _FolderService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_GetFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).GetFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_GetFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).GetFolder(ctx, req.(*GetFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_ListFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).ListFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_ListFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).ListFolders(ctx, req.(*ListFoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_UpdateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).UpdateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_UpdateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).UpdateFolder(ctx, req.(*UpdateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_DeleteFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).DeleteFolder(ctx, req.(*DeleteFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_ToggleFolderActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFolderActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).ToggleFolderActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_ToggleFolderActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).ToggleFolderActive(ctx, req.(*ToggleFolderActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_ScanFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).ScanFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FolderService_ScanFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).ScanFolder(ctx, req.(*ScanFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FolderService_ServiceDesc is the grpc.ServiceDesc for FolderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FolderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aether.api.FolderService",
	HandlerType: (*FolderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFolder",
			Handler:    _FolderService_CreateFolder_Handler,
		},
		{
			MethodName: "GetFolder",
			Handler:    _FolderService_GetFolder_Handler,
		},
		{
			MethodName: "ListFolders",
			Handler:    _FolderService_ListFolders_Handler,
		},
		{
			MethodName: "UpdateFolder",
			Handler:    _FolderService_UpdateFolder_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _FolderService_DeleteFolder_Handler,
		},
		{
			MethodName: "ToggleFolderActive",
			Handler:    _FolderService_ToggleFolderActive_Handler,
		},
		{
			MethodName: "ScanFolder",
			Handler:    _FolderService_ScanFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/folder.proto",
}
