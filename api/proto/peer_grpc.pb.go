// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/peer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PeerService_DiscoverPeers_FullMethodName      = "/aether.api.PeerService/DiscoverPeers"
	PeerService_ConnectToPeer_FullMethodName      = "/aether.api.PeerService/ConnectToPeer"
	PeerService_DisconnectFromPeer_FullMethodName = "/aether.api.PeerService/DisconnectFromPeer"
	PeerService_ListPeers_FullMethodName          = "/aether.api.PeerService/ListPeers"
	PeerService_GetPeerInfo_FullMethodName        = "/aether.api.PeerService/GetPeerInfo"
	PeerService_TrustPeer_FullMethodName          = "/aether.api.PeerService/TrustPeer"
	PeerService_UntrustPeer_FullMethodName        = "/aether.api.PeerService/UntrustPeer"
	PeerService_RemovePeer_FullMethodName         = "/aether.api.PeerService/RemovePeer"
)

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Peer servisi
type PeerServiceClient interface {
	// Peer'ları keşfet
	DiscoverPeers(ctx context.Context, in *DiscoverPeersRequest, opts ...grpc.CallOption) (*DiscoverPeersResponse, error)
	// Peer'a bağlan
	ConnectToPeer(ctx context.Context, in *ConnectToPeerRequest, opts ...grpc.CallOption) (*Status, error)
	// Peer bağlantısını kes
	DisconnectFromPeer(ctx context.Context, in *DisconnectFromPeerRequest, opts ...grpc.CallOption) (*Status, error)
	// Tüm peer'ları listele
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	// Peer detay bilgisi getir
	GetPeerInfo(ctx context.Context, in *GetPeerInfoRequest, opts ...grpc.CallOption) (*PeerInfoResponse, error)
	// Peer'i güvenilir yap
	TrustPeer(ctx context.Context, in *TrustPeerRequest, opts ...grpc.CallOption) (*Status, error)
	// Peer'i güvenilmez yap
	UntrustPeer(ctx context.Context, in *UntrustPeerRequest, opts ...grpc.CallOption) (*Status, error)
	// Peer'ı kaldır
	RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*Status, error)
}

type peerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerServiceClient(cc grpc.ClientConnInterface) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) DiscoverPeers(ctx context.Context, in *DiscoverPeersRequest, opts ...grpc.CallOption) (*DiscoverPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverPeersResponse)
	err := c.cc.Invoke(ctx, PeerService_DiscoverPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) ConnectToPeer(ctx context.Context, in *ConnectToPeerRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, PeerService_ConnectToPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) DisconnectFromPeer(ctx context.Context, in *DisconnectFromPeerRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, PeerService_DisconnectFromPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, PeerService_ListPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) GetPeerInfo(ctx context.Context, in *GetPeerInfoRequest, opts ...grpc.CallOption) (*PeerInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeerInfoResponse)
	err := c.cc.Invoke(ctx, PeerService_GetPeerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) TrustPeer(ctx context.Context, in *TrustPeerRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, PeerService_TrustPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) UntrustPeer(ctx context.Context, in *UntrustPeerRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, PeerService_UntrustPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, PeerService_RemovePeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServiceServer is the server API for PeerService service.
// All implementations must embed UnimplementedPeerServiceServer
// for forward compatibility.
//
// Peer servisi
type PeerServiceServer interface {
	// Peer'ları keşfet
	DiscoverPeers(context.Context, *DiscoverPeersRequest) (*DiscoverPeersResponse, error)
	// Peer'a bağlan
	ConnectToPeer(context.Context, *ConnectToPeerRequest) (*Status, error)
	// Peer bağlantısını kes
	DisconnectFromPeer(context.Context, *DisconnectFromPeerRequest) (*Status, error)
	// Tüm peer'ları listele
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	// Peer detay bilgisi getir
	GetPeerInfo(context.Context, *GetPeerInfoRequest) (*PeerInfoResponse, error)
	// Peer'i güvenilir yap
	TrustPeer(context.Context, *TrustPeerRequest) (*Status, error)
	// Peer'i güvenilmez yap
	UntrustPeer(context.Context, *UntrustPeerRequest) (*Status, error)
	// Peer'ı kaldır
	RemovePeer(context.Context, *RemovePeerRequest) (*Status, error)
	mustEmbedUnimplementedPeerServiceServer()
}

// UnimplementedPeerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPeerServiceServer struct{}

func (UnimplementedPeerServiceServer) DiscoverPeers(context.Context, *DiscoverPeersRequest) (*DiscoverPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverPeers not implemented")
}
func (UnimplementedPeerServiceServer) ConnectToPeer(context.Context, *ConnectToPeerRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectToPeer not implemented")
}
func (UnimplementedPeerServiceServer) DisconnectFromPeer(context.Context, *DisconnectFromPeerRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectFromPeer not implemented")
}
func (UnimplementedPeerServiceServer) ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedPeerServiceServer) GetPeerInfo(context.Context, *GetPeerInfoRequest) (*PeerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerInfo not implemented")
}
func (UnimplementedPeerServiceServer) TrustPeer(context.Context, *TrustPeerRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrustPeer not implemented")
}
func (UnimplementedPeerServiceServer) UntrustPeer(context.Context, *UntrustPeerRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UntrustPeer not implemented")
}
func (UnimplementedPeerServiceServer) RemovePeer(context.Context, *RemovePeerRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeer not implemented")
}
func (UnimplementedPeerServiceServer) mustEmbedUnimplementedPeerServiceServer() {}
func (UnimplementedPeerServiceServer) testEmbeddedByValue()                     {}

// UnsafePeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerServiceServer will
// result in compilation errors.
type UnsafePeerServiceServer interface {
	mustEmbedUnimplementedPeerServiceServer()
}

func RegisterPeerServiceServer(s grpc.ServiceRegistrar, srv PeerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPeerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PeerService_ServiceDesc, srv)
}

func _PeerService_DiscoverPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).DiscoverPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_DiscoverPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).DiscoverPeers(ctx, req.(*DiscoverPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_ConnectToPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectToPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).ConnectToPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_ConnectToPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).ConnectToPeer(ctx, req.(*ConnectToPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_DisconnectFromPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectFromPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).DisconnectFromPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_DisconnectFromPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).DisconnectFromPeer(ctx, req.(*DisconnectFromPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_ListPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_GetPeerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).GetPeerInfo(ctx, req.(*GetPeerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_TrustPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrustPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).TrustPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_TrustPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).TrustPeer(ctx, req.(*TrustPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_UntrustPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UntrustPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).UntrustPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_UntrustPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).UntrustPeer(ctx, req.(*UntrustPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_RemovePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).RemovePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_RemovePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).RemovePeer(ctx, req.(*RemovePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerService_ServiceDesc is the grpc.ServiceDesc for PeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aether.api.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverPeers",
			Handler:    _PeerService_DiscoverPeers_Handler,
		},
		{
			MethodName: "ConnectToPeer",
			Handler:    _PeerService_ConnectToPeer_Handler,
		},
		{
			MethodName: "DisconnectFromPeer",
			Handler:    _PeerService_DisconnectFromPeer_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _PeerService_ListPeers_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _PeerService_GetPeerInfo_Handler,
		},
		{
			MethodName: "TrustPeer",
			Handler:    _PeerService_TrustPeer_Handler,
		},
		{
			MethodName: "UntrustPeer",
			Handler:    _PeerService_UntrustPeer_Handler,
		},
		{
			MethodName: "RemovePeer",
			Handler:    _PeerService_RemovePeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/peer.proto",
}
