// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/p2p.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	P2PDataService_RequestChunk_FullMethodName      = "/aether.api.P2PDataService/RequestChunk"
	P2PDataService_TransferChunk_FullMethodName     = "/aether.api.P2PDataService/TransferChunk"
	P2PDataService_ShareFileMetadata_FullMethodName = "/aether.api.P2PDataService/ShareFileMetadata"
	P2PDataService_Ping_FullMethodName              = "/aether.api.P2PDataService/Ping"
)

// P2PDataServiceClient is the client API for P2PDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// P2P data transfer servisi
// Bu servis peer'lar arası direkt iletişim için kullanılır
type P2PDataServiceClient interface {
	// Chunk talep et
	RequestChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error)
	// Chunk gönder (streaming)
	TransferChunk(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ChunkData, TransferStatus], error)
	// Dosya metadata'sını paylaş
	ShareFileMetadata(ctx context.Context, in *FileMetadataRequest, opts ...grpc.CallOption) (*FileMetadataResponse, error)
	// Ping (bağlantı testi)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type p2PDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PDataServiceClient(cc grpc.ClientConnInterface) P2PDataServiceClient {
	return &p2PDataServiceClient{cc}
}

func (c *p2PDataServiceClient) RequestChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkResponse)
	err := c.cc.Invoke(ctx, P2PDataService_RequestChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PDataServiceClient) TransferChunk(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ChunkData, TransferStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &P2PDataService_ServiceDesc.Streams[0], P2PDataService_TransferChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChunkData, TransferStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type P2PDataService_TransferChunkClient = grpc.ClientStreamingClient[ChunkData, TransferStatus]

func (c *p2PDataServiceClient) ShareFileMetadata(ctx context.Context, in *FileMetadataRequest, opts ...grpc.CallOption) (*FileMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileMetadataResponse)
	err := c.cc.Invoke(ctx, P2PDataService_ShareFileMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PDataServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, P2PDataService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PDataServiceServer is the server API for P2PDataService service.
// All implementations must embed UnimplementedP2PDataServiceServer
// for forward compatibility.
//
// P2P data transfer servisi
// Bu servis peer'lar arası direkt iletişim için kullanılır
type P2PDataServiceServer interface {
	// Chunk talep et
	RequestChunk(context.Context, *ChunkRequest) (*ChunkResponse, error)
	// Chunk gönder (streaming)
	TransferChunk(grpc.ClientStreamingServer[ChunkData, TransferStatus]) error
	// Dosya metadata'sını paylaş
	ShareFileMetadata(context.Context, *FileMetadataRequest) (*FileMetadataResponse, error)
	// Ping (bağlantı testi)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedP2PDataServiceServer()
}

// UnimplementedP2PDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedP2PDataServiceServer struct{}

func (UnimplementedP2PDataServiceServer) RequestChunk(context.Context, *ChunkRequest) (*ChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChunk not implemented")
}
func (UnimplementedP2PDataServiceServer) TransferChunk(grpc.ClientStreamingServer[ChunkData, TransferStatus]) error {
	return status.Errorf(codes.Unimplemented, "method TransferChunk not implemented")
}
func (UnimplementedP2PDataServiceServer) ShareFileMetadata(context.Context, *FileMetadataRequest) (*FileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFileMetadata not implemented")
}
func (UnimplementedP2PDataServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedP2PDataServiceServer) mustEmbedUnimplementedP2PDataServiceServer() {}
func (UnimplementedP2PDataServiceServer) testEmbeddedByValue()                        {}

// UnsafeP2PDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PDataServiceServer will
// result in compilation errors.
type UnsafeP2PDataServiceServer interface {
	mustEmbedUnimplementedP2PDataServiceServer()
}

func RegisterP2PDataServiceServer(s grpc.ServiceRegistrar, srv P2PDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedP2PDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&P2PDataService_ServiceDesc, srv)
}

func _P2PDataService_RequestChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PDataServiceServer).RequestChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PDataService_RequestChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PDataServiceServer).RequestChunk(ctx, req.(*ChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PDataService_TransferChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PDataServiceServer).TransferChunk(&grpc.GenericServerStream[ChunkData, TransferStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type P2PDataService_TransferChunkServer = grpc.ClientStreamingServer[ChunkData, TransferStatus]

func _P2PDataService_ShareFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PDataServiceServer).ShareFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PDataService_ShareFileMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PDataServiceServer).ShareFileMetadata(ctx, req.(*FileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PDataService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PDataServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PDataService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PDataServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// P2PDataService_ServiceDesc is the grpc.ServiceDesc for P2PDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2PDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aether.api.P2PDataService",
	HandlerType: (*P2PDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestChunk",
			Handler:    _P2PDataService_RequestChunk_Handler,
		},
		{
			MethodName: "ShareFileMetadata",
			Handler:    _P2PDataService_ShareFileMetadata_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _P2PDataService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransferChunk",
			Handler:       _P2PDataService_TransferChunk_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/p2p.proto",
}
