package boltdb

import (
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"log"
	"strconv"

	bolt "go.etcd.io/bbolt"
	"golang.org/x/crypto/bcrypt"
)

// InitializeDesignSpecConfig BoltDB'yi tasarÄ±m spesifikasyonuna gÃ¶re baÅŸlatÄ±r
func (c *Connection) InitializeDesignSpecConfig() error {
	if c.db == nil {
		if err := c.Open(); err != nil {
			return err
		}
	}

	log.Println("ğŸ”„ BoltDB tasarÄ±m spesifikasyonuna gÃ¶re yapÄ±landÄ±rÄ±lÄ±yor...")

	return c.db.Update(func(tx *bolt.Tx) error {
		// Config bucket'Ä±nÄ± al veya oluÅŸtur
		bucket, err := tx.CreateBucketIfNotExists([]byte("config"))
		if err != nil {
			return fmt.Errorf("config bucket oluÅŸturulamadÄ±: %w", err)
		}

		// Mevcut deÄŸerleri koru, sadece eksikleri ekle
		configs := c.getDesignSpecConfigs()

		for key, defaultValue := range configs {
			// EÄŸer key zaten varsa atla
			if existing := bucket.Get([]byte(key)); existing != nil {
				continue
			}

			// Yeni deÄŸeri ekle
			if err := bucket.Put([]byte(key), []byte(defaultValue)); err != nil {
				return fmt.Errorf("key %s eklenemedi: %w", key, err)
			}
			log.Printf("   âœ“ %s = %s", key, defaultValue)
		}

		log.Println("âœ… BoltDB baÅŸarÄ±yla yapÄ±landÄ±rÄ±ldÄ±!")
		return nil
	})
}

// getDesignSpecConfigs tasarÄ±m spesifikasyonuna gÃ¶re varsayÄ±lan konfigÃ¼rasyonlarÄ± dÃ¶ndÃ¼rÃ¼r
func (c *Connection) getDesignSpecConfigs() map[string]string {
	// Benzersiz instance ID oluÅŸtur
	instanceID := c.generateInstanceID()
	
	// Admin API hash oluÅŸtur (varsayÄ±lan: "admin123")
	adminHash, _ := bcrypt.GenerateFromPassword([]byte("admin123"), bcrypt.DefaultCost)
	
	return map[string]string{
		// TASARIM SPESÄ°FÄ°KASYONU - APP
		"app:instance_id": instanceID,

		// TASARIM SPESÄ°FÄ°KASYONU - ADMIN
		"admin:api_hash": string(adminHash),

		// TASARIM SPESÄ°FÄ°KASYONU - NETWORK
		"network:port":        "22000",
		"network:stun_server": "stun.l.google.com:19302",

		// TASARIM SPESÄ°FÄ°KASYONU - BANDWIDTH
		"bandwidth:limit_up":   "0", // 0 = sÄ±nÄ±rsÄ±z
		"bandwidth:limit_down": "0", // 0 = sÄ±nÄ±rsÄ±z

		// TASARIM SPESÄ°FÄ°KASYONU - USER
		"user:display_name": "Aether User",

		// TASARIM SPESÄ°FÄ°KASYONU - UI
		"ui:theme_mode": "dark",

		// TASARIM SPESÄ°FÄ°KASYONU - SECURITY
		// Not: admin_cert gerÃ§ek sertifika olmalÄ±, ÅŸimdilik placeholder
		"security:admin_cert": "PLACEHOLDER_CERT",
	}
}

// generateInstanceID benzersiz bir instance ID oluÅŸturur
func (c *Connection) generateInstanceID() string {
	bytes := make([]byte, 16)
	if _, err := rand.Read(bytes); err != nil {
		// Hata durumunda timestamp bazlÄ± ID
		return fmt.Sprintf("instance-%d", 1729255621) // Unix timestamp
	}
	return hex.EncodeToString(bytes)
}

// GetConfig belirli bir config deÄŸerini okur
func (c *Connection) GetConfig(key string) (string, error) {
	var value string
	err := c.db.View(func(tx *bolt.Tx) error {
		bucket := tx.Bucket([]byte("config"))
		if bucket == nil {
			return fmt.Errorf("config bucket bulunamadÄ±")
		}

		val := bucket.Get([]byte(key))
		if val == nil {
			return fmt.Errorf("key bulunamadÄ±: %s", key)
		}

		value = string(val)
		return nil
	})

	return value, err
}

// GetConfigInt config deÄŸerini integer olarak okur
func (c *Connection) GetConfigInt(key string) (int, error) {
	strVal, err := c.GetConfig(key)
	if err != nil {
		return 0, err
	}

	intVal, err := strconv.Atoi(strVal)
	if err != nil {
		return 0, fmt.Errorf("key %s integer deÄŸil: %w", key, err)
	}

	return intVal, nil
}

// SetConfig bir config deÄŸerini gÃ¼nceller
func (c *Connection) SetConfig(key, value string) error {
	return c.db.Update(func(tx *bolt.Tx) error {
		bucket := tx.Bucket([]byte("config"))
		if bucket == nil {
			return fmt.Errorf("config bucket bulunamadÄ±")
		}

		return bucket.Put([]byte(key), []byte(value))
	})
}

// ListAllConfigs tÃ¼m config deÄŸerlerini listeler
func (c *Connection) ListAllConfigs() (map[string]string, error) {
	configs := make(map[string]string)

	err := c.db.View(func(tx *bolt.Tx) error {
		bucket := tx.Bucket([]byte("config"))
		if bucket == nil {
			return fmt.Errorf("config bucket bulunamadÄ±")
		}

		return bucket.ForEach(func(k, v []byte) error {
			configs[string(k)] = string(v)
			return nil
		})
	})

	return configs, err
}

